BUBBLE SORT O(n^2) // O(1)
static void bubble(int arr[]){
  boolean swapped;
        for(int i =0; i < arr.length-1; i++){
            swapped = false;
            for (int j = 1; j < arr.length - i; j++){
                if(arr[j] < arr[j-1]){
                    int temp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = temp;
                    swapped = true;
                }}
                  if(!swapped){
                    break;}
                  }}
SELECTION SORT O(n^2) // O(1)
 static void selectionSort(int arr[]){
        for(int i = 0; i < arr.length -1; i++){
            int min = i;
            for(int j = i + 1; j < arr.length; j ++){
                if(arr[j] < arr[min]){
                    min = j;
                }
            }
            int temp = arr[i];
            arr[i] = arr[min];
            arr[min] = temp;
        }}
INSERTION SORT O(n^2) // O(1)
static void insertionSort(int arr[]){
        for(int i = 1; i < arr.length; i++){
            int temp = arr[i];
            int j = i - 1;
            while(j >= 0 && arr[j] > temp){
                arr[j+1] = arr[j];
                j--;
            }
            arr[j+1] = temp;
        }
    }
CYCLIC SORT when elements are given from 1,n
static void cycleSort(int arr[]){
        int i=0;
        while(i < arr.length){
            int correct = arr[i] - 1;
            if(arr[i] != arr[correct]){
                swap(arr, i , correct);
            }
            else{
                i++;
            }
        }
    }

QUICK SORT
  static void quickSort(int array[], int start, int end){
        if(start >= end){
            return;
        }
        
        int pivot = partition(array, start, end);
        quickSort(array, start, pivot - 1);
        quickSort(array, pivot + 1, end);
        
    }
    private static int partition(int array[], int start, int end){
        int pivot = array[end];
        int i = start - 1;
        for(int j = start; j <= end - 1; j++){
            if(array[j] < pivot){
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        i++;
        int temp = array[i];
        array[i] = array[end];
        array[end] = temp;
        return i;
    }  

MERGE SORT
