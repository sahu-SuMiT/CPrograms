SIEVE
static void sieve(int n, boolean[] primes){
        for(int i = 2; i * i <= n; i++){
            if(!primes[i]){
                for(int j = i*2; j <= n; j+=i){
                    primes[j] = true;
                }
            }
        }
        
        for(int i = 2; i <= n; i++){
            if(!primes[i]){
                System.out.printf("%d ",i);
            }
        }
    }
SQUARE ROOT
static double sqrt(int n, int p){
        int start = 1; 
        int end = n;
        double root = 0.00;
        //System.out.println(root);
        while(start <= end){
            int mid = start + (end - start)/2;
            if(mid * mid == n){
                return mid;
            }
            else if (mid * mid < n){
                root = mid;
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }   
        System.out.println(root);
        double incr = 0.1;
        for(int i = 0; i < p; i++){ 
            while(root * root <= n){    
                root += incr;
            }
            root -= incr; 
            incr /= 10;
        }
        return root;
NEWTON METHOD SQRT
double rootN(int n){
    double root = 0;
    double x = n;
    while(true){
        root = 0.5 * (x + x/n);
        if(Math.abs(root - x) < 1){
            break;
        }
        root = x;
    }
    return root;
}
GCD
static int GCD(int a, int b){
if(a == 0){
        return b;
}
return gcd(b % a, a);
}
