 int start=0; int end= arr.length-1;

        int ans=-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            
            if(target==arr[mid]){
                ans = mid;
                return ans;
            }
            else if(target<arr[mid]){
               end = mid -1; 
            }
            else if(target>arr[mid]){
                start = mid +1;
            }
        }
        return ans;

PEAK IN MOUNTAIN ARRAY
   while(start < end){
   ...
   if(arr[mid] < arr[mid + 1]){
     start = mid + 1;
   }
   else if(arr[mid] > arr[mid + 1]){
     end = mid;
   }
  
   }
return start;
PIVOT IN ROTATED ARRAY
static int pivot(int[] arr){
        int start = 0;
        int end = arr.length -1;
        
        if(arr[start] < arr[end]){
            return arr[end];
        }
        while(start < end){
            int mid = start + (end - start)/2;
            if(arr[start ] == arr[end]){
                return start;
            }
            else if(arr[start] > arr[mid]){
                end = mid -1;
            }
            else if(arr[mid] < arr[mid + 1]){
                start = mid + 1;
            }
            else{
                return mid;
            }
        }
        return start;
    }
SEARCH IN 2D SORTED ARRAY
static int [] search(int arr[][], int target){
        int r = 0;
        int c = arr[0].length - 1;
        while(r <= arr.length - 1 && c >=0){
            if(arr[r][c] == target){
                return new int[] {r,c};
            }
            else if(arr[r][c] < target){
                r++;
            }
            else{
                c--;
            }
        }
        return new int[] {-1,-1};
    }
BINARY SEARCH IN 2D SORTED ARRAY
public class Main {
    public static void main(String[] args) {
        int matrix[][] = /*{{1,2,3,4},
                          {5,6,7,8},
                          {9,10,11,12},
                          {13,14,15,16}};*/
                
        int target = 15;
        int ans[] = find(matrix, target);
        System.out.println(ans[0] + " " + ans[1]);

    }
    static int[] rowBinarySearch(int matrix[][], int target, int row, int start, int end){
        while(start <= end){
            int mid = start + (end -start)/2;
            if(matrix[row][mid] == target){
                return new int[] {row, mid};
            }
            else if(matrix[row][mid] < target){
                start = mid + 1;
            }
            else{
                end = mid -1;
            }
        }
        return new int[] {-1,-1};
    }

    static int [] find(int matrix[][], int target){
        int rStart = 0;
        int rEnd = matrix.length -1;
        int cMid = (matrix[0].length-1)/2;

        while(rStart < rEnd -1){
            int rMid = rStart + (rEnd - rStart)/2;
            if(matrix[rMid][cMid] == target){
                return new int[]{rMid,cMid};
            }
            else if(matrix[rMid][cMid] < target){
                rStart = rMid;
            }
            else{
                rEnd = rMid;
            }
        }
        //the two intersection points are checked
       int ans[] = rowBinarySearch(matrix,target, rStart, 0, cMid);

        if(ans[0] == -1 && ans[1] ==-1){
            ans = rowBinarySearch(matrix, target, rEnd, 0,cMid);
        }
        if(ans[0] ==-1 && ans[1]==-1){
            ans = rowBinarySearch(matrix, target, rStart, cMid,matrix[0].length-1);
        }

        if(ans[0] == -1 && ans[1] == -1){
            ans = rowBinarySearch(matrix, target, rEnd, cMid, matrix[0].length - 1);

        }

        return ans;
THIS PIVOT HANDLES NEGAIVE VALUES TOO
static int pivot(int arr[]){
        int start = 0;
        int end = arr.length -1;
        //case if the array is not rotated
        if(arr[start] <= arr[end]){
            return end;
        }
        while(start <= end){
            int mid = start + (end - start)/2;
            if(arr[start] > arr[mid]){
                end = mid - 1;
            }
            else if(arr[mid] < arr[mid + 1]){
                start = mid + 1;
            }
            else if(arr[start] < arr[mid]){
                start = mid;
            }
            else if(arr[mid] == arr[mid + 1]){
                start = ++mid;
            }
            else {
                return mid;
            }
        }
        return -1;
    }

    }
}
